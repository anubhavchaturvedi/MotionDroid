package com.example.motiondroid;

import java.io.BufferedWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.net.ServerSocket;
import java.net.Socket;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.app.Activity;
import android.content.Context;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.os.Bundle;
import android.os.Handler;
import android.widget.TextView;
import android.widget.Toast;

public class MainActivity extends Activity implements SensorEventListener {

	private TextView dataAccelerometer;
	private TextView dataGravity;
	private TextView dataGyroscope;
	private TextView dataLinearAcceleration;
	private TextView dataRotationVector;
	
	private final String FLOAT_FORMAT = "%.6f";
	private final int TRANSMIT_DELAY = 1;
	
	
	SensorManager mSensorManager;
	Sensor accelerometer, gravity, gyroscope, linear_acceleration, rotation;
	
	private ServerSocket serverSocket;
	Thread serverThread = null;
	Handler updateConversationHandler;

	public static final int SERVERPORT = 6000; 
	
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.stats_for_nerds);
        
        dataAccelerometer = (TextView) findViewById(R.id.data_accelerometer);
        dataGravity = (TextView) findViewById(R.id.data_gravity);
        dataGyroscope = (TextView) findViewById(R.id.data_gyroscope);
        dataLinearAcceleration = (TextView) findViewById(R.id.data_linear_acceleration);
        dataRotationVector = (TextView) findViewById(R.id.data_rotation_vector);
        
        sense();
        
        this.serverThread = new Thread(new ServerThread());
        this.serverThread.start();

    }
    
    public void sense()
    {
    	mSensorManager = (SensorManager) getSystemService(Context.SENSOR_SERVICE);
    	
    	accelerometer = mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
    	if(accelerometer == null)
    		Toast.makeText(this, "Accelerometer sensor not found", Toast.LENGTH_SHORT).show();
    	
    	gravity = mSensorManager.getDefaultSensor(Sensor.TYPE_GRAVITY);
    	if(gravity == null)
       		Toast.makeText(this, "Gravity sensor not found", Toast.LENGTH_SHORT).show();
    	
    	
    	gyroscope = mSensorManager.getDefaultSensor(Sensor.TYPE_GYROSCOPE);
    	if(gyroscope == null) 
    		Toast.makeText(this, "Gyroscope sensor not found", Toast.LENGTH_SHORT).show();
    	
    	linear_acceleration = mSensorManager.getDefaultSensor(Sensor.TYPE_LINEAR_ACCELERATION);
    	if(linear_acceleration == null)
    		Toast.makeText(this, "Linear Acceleration sensor not found", Toast.LENGTH_SHORT).show();
    	
    	rotation = mSensorManager.getDefaultSensor(Sensor.TYPE_ROTATION_VECTOR);
    	if(rotation == null)
    		Toast.makeText(this, "Rotation sensor not found", Toast.LENGTH_SHORT).show();
    	
    	mSensorManager.registerListener(this, accelerometer, SensorManager.SENSOR_DELAY_NORMAL);
    	mSensorManager.registerListener(this, gravity, SensorManager.SENSOR_DELAY_NORMAL);
    	mSensorManager.registerListener(this, gyroscope, SensorManager.SENSOR_DELAY_NORMAL);
    	mSensorManager.registerListener(this, linear_acceleration, SensorManager.SENSOR_DELAY_NORMAL);
    	mSensorManager.registerListener(this, rotation, SensorManager.SENSOR_DELAY_NORMAL);
    }
    
    @Override
    public void onSensorChanged(SensorEvent event){
    	if(event.sensor.getType() == Sensor.TYPE_ACCELEROMETER)
    	{
    		dataAccelerometer.setText(parseAccelerometer(event));
    	}
    	if(event.sensor.getType() == Sensor.TYPE_GRAVITY)
    	{
    		dataGravity.setText(parseGravity(event));
    	}
    	if(event.sensor.getType() == Sensor.TYPE_GYROSCOPE)
    	{
    		dataGyroscope.setText(parseGyroscope(event));
    	}
    	if(event.sensor.getType() == Sensor.TYPE_LINEAR_ACCELERATION)
    	{
    		dataLinearAcceleration.setText(parseLinearAcceleration(event));
    	}
    	if(event.sensor.getType() == Sensor.TYPE_ROTATION_VECTOR)
    	{
    		dataRotationVector.setText(parseRotationVector(event));
    	}
    }
    
    private String parseAccelerometer(SensorEvent event)
    {
    	float[] values=event.values;
    	
    	return "{\"accelerometer\":{"
    	+ "\"x\" : "+String.format(FLOAT_FORMAT, values[0])+","
		+ "\"y\" : "+String.format(FLOAT_FORMAT, values[1])+","
		+ "\"z\" : "+String.format(FLOAT_FORMAT, values[2])
		+"}}";
    	
    	/*
    	return "Accelerometer Sensor:\n"
			+ "x-axis : "+String.format(FLOAT_FORMAT, values[0])+"\n"
			+ "y-axis : "+String.format(FLOAT_FORMAT, values[1])+"\n"
			+ "z-axis : "+String.format(FLOAT_FORMAT, values[2]);
			*/
    }

    private String parseGravity(SensorEvent event)
    {
    	float values[]=event.values;
    	
    	return "Gravity Sensor:\n"
    	+ "x-axis : "+String.format(FLOAT_FORMAT, values[0])+"\n"
		+ "y-axis : "+String.format(FLOAT_FORMAT, values[1])+"\n"
		+ "z-axis : "+String.format(FLOAT_FORMAT, values[2]);
    }
    
    private String parseGyroscope(SensorEvent event)
    {
    	float values[]=event.values;
    	
    	return "Gyroscope Sensor:\n"
    	+ "x-axis : "+String.format(FLOAT_FORMAT, values[0])+"\n"
		+ "y-axis : "+String.format(FLOAT_FORMAT, values[1])+"\n"
		+ "z-axis : "+String.format(FLOAT_FORMAT, values[2]);
    }
    
    private String parseLinearAcceleration(SensorEvent event)
    {
    	float values[]=event.values;
    	
    	return "{\"linear_acceleration\":{"
    	+ "\"x\" : "+String.format(FLOAT_FORMAT, values[0])+","
		+ "\"y\" : "+String.format(FLOAT_FORMAT, values[1])+","
		+ "\"z\" : "+String.format(FLOAT_FORMAT, values[2])
		+"}}";
    }
    
    private String parseRotationVector(SensorEvent event)
    {
    	float values[]=event.values;
    	
    	if( values.length == 3)
    		return "Rotation Sensor:\n"
    		+ "x-axis : "+String.format(FLOAT_FORMAT, values[0])+"\n"
			+ "y-axis : "+String.format(FLOAT_FORMAT, values[1])+"\n"
			+ "z-axis : "+String.format(FLOAT_FORMAT, values[2]);
    	else
    		return "Rotation Sensor:\n"
    		+ "x-axis : "+String.format(FLOAT_FORMAT, values[0])+"\n"
			+ "y-axis : "+String.format(FLOAT_FORMAT, values[1])+"\n"
			+ "z-axis : "+String.format(FLOAT_FORMAT, values[2])+"\n"
			+ "scalar component : " + String.format(FLOAT_FORMAT, values[3]);
    }
    
	@Override
	public void onAccuracyChanged(Sensor sensor, int accuracy) {
		// TODO Auto-generated method stub
		
	}
 
	private String getStateJson()
	{
		return "["+dataLinearAcceleration.getText().toString()+","
				+ dataAccelerometer.getText().toString()
				+"]";
	}
	
	@Override
	protected void onStop()
	{
		super.onStop();
		try {
			serverSocket.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	
	class ServerThread implements Runnable {
		public void run() {
			Socket socket = null;
			try {
				serverSocket = new ServerSocket(SERVERPORT);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			while (!Thread.currentThread().isInterrupted()) {
				try {
					socket = serverSocket.accept();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				CommunicationThread commThread=null;
				try {
					commThread = new CommunicationThread(socket);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				new Thread(commThread).start();
			}
			
		}
	}
	
	class CommunicationThread implements Runnable {
	
		private Socket clientSocket;

		private BufferedWriter output;
		
		public CommunicationThread(Socket clientSocket) throws IOException {

			this.clientSocket = clientSocket;
			this.output = new BufferedWriter(new OutputStreamWriter(this.clientSocket.getOutputStream()));

		}
		
		public void run() {

			while (!Thread.currentThread().isInterrupted()) {

				String writeData=getStateJson();
				
				// testing with accelerometer
				JSONArray jarr=null;
				try {
					jarr = new JSONArray(writeData);
				} catch (JSONException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				double x=0,y=0;
				JSONObject accelerometerdata=null;
				try {
					accelerometerdata = jarr.getJSONObject(1);
				} catch (JSONException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				try {
					x= accelerometerdata.getJSONObject("accelerometer").getDouble("x");
				} catch (JSONException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				try {
					y= accelerometerdata.getJSONObject("accelerometer").getDouble("y");
				} catch (JSONException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				
				try {
					output.write(x+" " + y);
					output.write("\n");
					
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				/*
				try {
					output.write(writeData);
					output.write("\n");
					
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				*/
				
				// delay transmission
				if(TRANSMIT_DELAY>0)
				{
					try {
						Thread.sleep(TRANSMIT_DELAY);
					} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
			}
		}
	}
}
